signature Int where
import GHC.Types (TYPE,RuntimeRep(..),Nat,IO)
import qualified GHC.Prim as GHC

data R :: RuntimeRep
data Int :: TYPE R
data IsizeR :: RuntimeRep
data Isize :: TYPE IsizeR
-- data MinBound :: Nat
data MaxBound :: Nat
data BoolR :: RuntimeRep
data Bool :: TYPE BoolR
data PairR r1 r2 :: RuntimeRep
data (a :: r1) * (b :: r2) :: TYPE (PairR r1 r2)

minBound :: () -> Int
maxBound :: () -> Int

print :: Int -> IO ()

fromInt :: Isize -> Int
toInt :: Int -> Isize

add :: Int -> Int -> Int
sub :: Int -> Int -> Int
mul :: Int -> Int -> Int

quot :: Int -> Int -> Int
rem :: Int -> Int -> Int
quotRem# :: Int -> Int -> Int * Int

and :: Int -> Int -> Int
or :: Int -> Int -> Int
xor :: Int -> Int -> Int
not :: Int -> Int

negate :: Int -> Int
addC :: Int -> Int -> Int * Bool
subC :: Int -> Int -> Int * Bool

gt :: Int -> Int -> Bool
ge :: Int -> Int -> Bool
lt :: Int -> Int -> Bool
le :: Int -> Int -> Bool
eq :: Int -> Int -> Bool
ne :: Int -> Int -> Bool

-- | Shift left logcial. Result is undefined if shift amount @ >= WORD_SIZE_IN_BITS@
shiftL# :: Int -> Isize -> Int

-- | Shift right arithmetic. Result is undefined if shift amount @ >= WORD_SIZE_IN_BITS@
shiftR# :: Int -> Isize -> Int

-- | Shift right logcial. Result is undefined if shift amount @ >= WORD_SIZE_IN_BITS@
shiftRL# :: Int -> Isize -> Int
